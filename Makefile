### COLORS ###
DEF_COLOR = \033[0;39m
GRAY = \033[0;90m
RED = \033[0;91m
GREEN = \033[0;92m
YELLOW = \033[0;93m
BLUE = \033[0;94m
MAGENTA = \033[0;95m
CYAN = \033[0;96m
WHITE = \033[0;97m

### VARIABLES ###
CC = gcc
AR = ar rcs
CFLAGS = -Wall -Wextra -Werror
NAME = libft.a
HEADER = include/libft.h
OBJF = .cache_exists	# needed to create obj/ directory

# Directories
SRC_DIR = src/
OBJ_DIR = obj/

# Files
SRC_FILES = ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c \
			ft_memset.c ft_bzero.c ft_memcpy.c ft_memmove.c ft_memchr.c ft_memcmp.c \
			ft_strlen.c ft_strlcpy.c ft_strlcat.c ft_strchr.c ft_strrchr.c ft_strncmp.c \
			ft_strnstr.c ft_strdup.c ft_substr.c ft_strjoin.c ft_strtrim.c ft_strmapi.c ft_striteri.c \
			ft_putchar_fd.c ft_putstr_fd.c ft_putendl_fd.c ft_putnbr_fd.c \
			ft_split.c ft_itoa.c ft_atoi.c \
			ft_toupper.c ft_tolower.c \

SRC_FILES_BONUS = ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c ft_lstadd_back.c
SRC =	$(addprefix $(SRC_DIR), $(SRC_FILES))
SRC_BONUS = $(addprefix $(SRC_DIR), $(SRC_FILES_BONUS))

ifndef BONUS
OBJ = $(addprefix $(OBJ_DIR), $(SRC_FILES:.c=.o))
else
OBJ = $(addprefix $(OBJ_DIR), $(SRC_FILES:.c=.o)) $(addprefix $(OBJ_DIR), $(SRC_FILES_BONUS:.c=.o))
endif


### COMPILATION ###

$(OBJF):
	@mkdir -p $(OBJ_DIR)

# Creating object files (.o) from source files (.c) inside the OBJ_DIR directory.
# The option -o indicates the name of the outpout, the option -c indicates the source that is used.
$(OBJ_DIR)%.o : $(SRC_DIR)%.c $(INCLUDE) | $(OBJF)
	@echo "$(YELLOW)Compiling: $< $(DEF_COLOR)"
	@$(CC) $(CFLAGS) -c $< -o $@

# Compiling all objets files (.o) to a file "NAME" :
$(NAME) : $(OBJ)
	@echo "$(YELLOW)Compiling libft... $(DEF_COLOR)"
	@$(AR) $(NAME) $(OBJ)
	@echo "$(CYAN)libft compiled!$(DEF_COLOR)"

### MEMO ###
# 	Special variables :
#		$@	Represents the target file that is being generated by the rule
#		$<	Represents the first dependency of the rule
#		$^	Represents all the dependencies of the rule, separated by spaces.
#		$?	Represents a list of dependencies that are newer than the target file.
#		$*	Represents the stem of the target filename (without the extension)

### RULES ###

all : $(NAME)

bonus :
	make BONUS=1 all

clean :
		@echo "$(YELLOW)Cleaning libft... $(DEF_COLOR)"
		@rm -rf $(OBJ_DIR)
		@echo "$(BLUE)libft object files cleaned!$(DEF_COLOR)"

fclean : clean
	@rm -rf $(NAME)
	@echo "$(BLUE)libft archive cleaned!$(DEF_COLOR)"

re :	fclean all

.PHONY: all clean fclean re bonus